<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\led_c.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\led_c.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Dec 20 15:31:59 2023
<BR><P>
<H3>Maximum Stack Usage =        148 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler &rArr; mymain &rArr; shell &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; putstr
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">EXTI15_10_IRQHandler</a> from exception.o(i.EXTI15_10_IRQHandler) referenced from start.o(RESET)
 <LI><a href="#[2]">PendSV_Handler</a> from exception.o(i.PendSV_Handler) referenced from start.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from start.o(.text) referenced from start.o(RESET)
 <LI><a href="#[1]">SVC_Handler</a> from start.o(.text) referenced from start.o(RESET)
 <LI><a href="#[3]">SysTick_Handler</a> from exception.o(i.SysTick_Handler) referenced from start.o(RESET)
 <LI><a href="#[7]">TIM8_UP_IRQHandler</a> from exception.o(i.TIM8_UP_IRQHandler) referenced from start.o(RESET)
 <LI><a href="#[4]">USART1_IRQHandler</a> from exception.o(i.USART1_IRQHandler) referenced from start.o(RESET)
 <LI><a href="#[5]">USART3_IRQHandler</a> from exception.o(i.USART3_IRQHandler) referenced from start.o(RESET)
 <LI><a href="#[8]">help_f</a> from help_cmd.o(i.help_f) referenced from help_cmd.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Reset_Handler &rArr; mymain &rArr; shell &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>start_app</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, start.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_and_start_app
</UL>

<P><STRONG><a name="[1]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, start.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[b]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[d]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2e]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[10]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[32]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[f]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[37]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, exception.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>PendSV_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, exception.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, exception.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, init.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[7]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, exception.o(i.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_UP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>USART1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, exception.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>USART3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, exception.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>be32_to_cpu</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.be32_to_cpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = be32_to_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_and_start_app
</UL>

<P><STRONG><a name="[23]"></a>copy_app</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.copy_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copy_app
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_and_start_app
</UL>

<P><STRONG><a name="[38]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.delay), UNUSED)

<P><STRONG><a name="[15]"></a>find_cmd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, command.o(i.find_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_f
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[39]"></a>finsh_get_echo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_get_echo), UNUSED)

<P><STRONG><a name="[26]"></a>finsh_get_prompt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[3a]"></a>finsh_get_prompt_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_get_prompt_mode), UNUSED)

<P><STRONG><a name="[3b]"></a>finsh_set_echo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, shell.o(i.finsh_set_echo), UNUSED)

<P><STRONG><a name="[3c]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, shell.o(i.finsh_set_prompt_mode), UNUSED)

<P><STRONG><a name="[1a]"></a>get_cmds</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, command.o(i.get_cmds))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_f
</UL>

<P><STRONG><a name="[19]"></a>getchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.getchar))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[2c]"></a>memcmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, string.o(i.memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[3d]"></a>memcpy</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, string.o(i.memcpy), UNUSED)

<P><STRONG><a name="[3e]"></a>memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, string.o(i.memmove), UNUSED)

<P><STRONG><a name="[3f]"></a>memset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, string.o(i.memset), UNUSED)

<P><STRONG><a name="[1c]"></a>msh_exec</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, parser.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[a]"></a>mymain</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.mymain))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mymain &rArr; shell &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_and_start_app
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[21]"></a>putchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.putchar))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puthex
</UL>

<P><STRONG><a name="[20]"></a>puthex</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(i.puthex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = puthex &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_and_start_app
</UL>

<P><STRONG><a name="[1b]"></a>putstr</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(i.putstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;help_f
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puthex
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_and_start_app
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>

<P><STRONG><a name="[1f]"></a>relocate_and_start_app</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.relocate_and_start_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = relocate_and_start_app &rArr; puthex &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_app
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_new_vector
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puthex
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_app
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;be32_to_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>

<P><STRONG><a name="[24]"></a>set_new_vector</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception.o(i.set_new_vector))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate_and_start_app
</UL>

<P><STRONG><a name="[1e]"></a>shell</STRONG> (Thumb, 840 bytes, Stack size 0 bytes, shell.o(i.shell))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = shell &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>

<P><STRONG><a name="[17]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, string.o(i.strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
</UL>

<P><STRONG><a name="[27]"></a>strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, string.o(i.strlen))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[1d]"></a>uart_init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uart.o(i.uart_init))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymain
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[18]"></a>finsh_getchar</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_getchar
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[28]"></a>shell_handle_history</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = shell_handle_history &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[2a]"></a>shell_push_history</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell
</UL>

<P><STRONG><a name="[14]"></a>_msh_exec_cmd</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, parser.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[16]"></a>msh_split</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, parser.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = msh_split &rArr; putstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[8]"></a>help_f</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, help_cmd.o(i.help_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = help_f &rArr; find_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmds
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> help_cmd.o(.data)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
